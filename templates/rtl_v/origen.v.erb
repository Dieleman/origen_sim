%#`include "<%= options[:top] %>"

`timescale 1ns/1ns

// 0 - Data
// 1 - Reserved 
//
// 0 - Drive
//
// 0 - Compare
//
// 0 - Force data 0
// 1 - Force data 1
module pin_driver(error, pin);

  output reg error;

  inout pin;

  reg [1:0] data = 0;
  reg [1:0] force_data = 0;
  reg compare = 0;
  reg drive = 0;
  reg [1023:0] memory = 0;

  wire drive_data = force_data[0] ? 0 : (force_data[1] ? 1 : data[0]);

  assign pin = drive ? drive_data : 1'bz;

  // Debug signal to show the expected data in the waves
  wire expect_data = compare ? data[0] : 1'bz;

  always @(*) begin
    error = compare ? (pin == data[0] ? 0 : 1) : 0;
  end

endmodule

module pin_drivers(errors, <%= dut.rtl_pins.map { |n, p, o| "#{p.id}_o" }.join(', ') %>);

% dut.rtl_pins.each do |name, pin, options|
  output <%= pin.id %>_o;
% end

% dut.rtl_pins.each do |name, pin, options|
  wire <%= pin.id %>_err;
% end

  output reg [31:0] errors = 0;

  always @(

% dut.rtl_pins.each_with_index do |(name, pin, options), i|
%   if i == 0
    posedge <%= pin.id %>_err
%   else
    or posedge <%= pin.id %>_err
%   end
% end
  ) begin
    errors[31:0] = errors[31:0] + 1;
  end

% dut.rtl_pins.each do |name, pin, options|
  pin_driver <%= pin.id %> (.pin(<%= pin.id %>_o), .error(<%= pin.id %>_err));
% end

endmodule


module debug(errors);

  input [31:0] errors;

  reg [1023:0] pattern = 0;
  reg [1023:0] comments = 0;

  reg handshake;

endmodule

module origen;

  reg finish = 0;

% dut.rtl_pins.each do |name, pin, options|
  wire <%= pin.id %>;
% end

  wire [31:0] errors;

  pin_drivers pins (
% dut.rtl_pins.each_with_index do |(name, pin, options), i|
    .<%= pin.id %>_o(<%= pin.id %>),
% end
    .errors(errors)
  );

  <%= options[:top].sub(/\..*/, '') %> dut (
% dut.rtl_pins.each_with_index do |(name, pin, options), i|
%   if options[:group]
%     if pin.group_index == 0
    .<%= pin.rtl_name %>({
%       pin.primary_group.each_with_index do |pin, i|
      <%= pin.id %><%= i == (pin.primary_group.size - 1) ? '' : ',' %>
%       end
    })<%= i == (dut.rtl_pins.size - 1) ? '' : ',' %>
%     end
%   else
    .<%= pin.rtl_name %>(<%= pin.id %>)<%= i == (dut.rtl_pins.size - 1) ? '' : ',' %>
%   end
% end
  );

  debug debug (
    .errors(errors)
  );

% if options[:vendor] == :icarus  
  initial
  begin
    $dumpfile("dut.vcd");
    $dumpvars(0,origen);
  end
% end
    
  always @(posedge finish) begin
    $finish;
  end
endmodule
